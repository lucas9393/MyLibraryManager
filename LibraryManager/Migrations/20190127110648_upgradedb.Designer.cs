// <auto-generated />
using System;
using LibraryManager.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryManager.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20190127110648_upgradedb")]
    partial class upgradedb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryManager.Model.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .HasMaxLength(75);

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryManager.Model.AuthorConference", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<int>("ConferenceId");

                    b.HasKey("AuthorId", "ConferenceId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("AuthorConference");
                });

            modelBuilder.Entity("LibraryManager.Model.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Category")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryManager.Model.BookStore", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("StoreId");

                    b.HasKey("BookId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("BookStore");
                });

            modelBuilder.Entity("LibraryManager.Model.Conference", b =>
                {
                    b.Property<int>("ConferenceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameConference")
                        .HasMaxLength(50);

                    b.HasKey("ConferenceID");

                    b.ToTable("Conference");
                });

            modelBuilder.Entity("LibraryManager.Model.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameStore")
                        .HasMaxLength(50);

                    b.HasKey("StoreID");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("LibraryManager.Model.AuthorConference", b =>
                {
                    b.HasOne("LibraryManager.Model.Author", "Author")
                        .WithMany("AuthorConferences")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibraryManager.Model.Conference", "Conference")
                        .WithMany("AuthorConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryManager.Model.Book", b =>
                {
                    b.HasOne("LibraryManager.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("LibraryManager.Model.BookStore", b =>
                {
                    b.HasOne("LibraryManager.Model.Book", "Book")
                        .WithMany("BookStores")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibraryManager.Model.Store", "Store")
                        .WithMany("BookStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
